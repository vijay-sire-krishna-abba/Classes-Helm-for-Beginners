WEBVTT

1
00:00:00.800 --> 00:00:07.680
Let's talk a bit more about Helm Charts. Helm is rather an easy-to-use command line tool,

2
00:00:07.680 --> 00:00:13.360
you just tell it to install this, uninstall that, upgrade something, roll back to a previous state,

3
00:00:13.360 --> 00:00:19.200
and so on. And it proceeds to do all the heavy lifting behind the scenes. It's basically an

4
00:00:19.200 --> 00:00:25.280
automation tool where we, the human operators, specify our desired end result, the destination,

5
00:00:25.280 --> 00:00:32.240
and then it doesn't matter if 5, 10, 20, or 50 actions are necessary to achieve that end result. And to

6
00:00:32.240 --> 00:00:37.680
get to that destination, Helm will go through all the required steps without bothering us with the

7
00:00:37.680 --> 00:00:44.959
details. But since in the command line, we don't give this tool a lot of info, except "Hey, I want

8
00:00:44.959 --> 00:00:53.439
this installed." How does it know how to achieve this goal? Helm knows how to do its job with the

9
00:00:53.439 --> 00:01:00.480
help of what are called Charts. Charts are like an instruction manual for it. By reading and

10
00:01:00.480 --> 00:01:07.599
interpreting their contents, it then knows exactly what it has to do to fulfill a user's request.

11
00:01:08.720 --> 00:01:14.480
As far as the human operators are concerned, charts are just a bunch of text files. Each

12
00:01:14.480 --> 00:01:21.040
specific file named in a specific way has a well-defined purpose. For example, as discussed before,

13
00:01:21.040 --> 00:01:25.680
in the values.yaml file, we'll find parameters that we can pass to the chart

14
00:01:25.680 --> 00:01:30.320
so that everything gets installed with the configuration options set as we desire.

15
00:01:31.919 --> 00:01:37.199
Now we saw this simple example earlier. In this case, we have two objects, a deployment and a

16
00:01:37.199 --> 00:01:42.080
service. And it's a standard deployment that deploys Pods of an image and a service that

17
00:01:42.080 --> 00:01:48.080
exposes it as a NodePort service. However, you might notice the image name and replicas are

18
00:01:48.080 --> 00:01:54.879
specified in a different form. This is called templating. The values that go here are part of

19
00:01:55.519 --> 00:02:02.639
the values.yaml file. And we will look into templating itself in more detail later in this

20
00:02:02.639 --> 00:02:10.080
course, and how to form these values. So the two files are templates. These are customized using

21
00:02:10.080 --> 00:02:15.759
the values from the values.yaml file to create the final version of files required to deploy

22
00:02:15.759 --> 00:02:22.880
the application on the Kubernetes cluster. Apart from the values.yaml file, every chart also

23
00:02:22.880 --> 00:02:29.520
has a Chart.yaml file, it contains information about the chart itself, such as the chart API

24
00:02:29.520 --> 00:02:36.479
version, which could be either v1 or v2. There's also an app version, which is used to

25
00:02:36.479 --> 00:02:41.839
specify the version of the application. And then we have the name of the chart, a description type

26
00:02:41.839 --> 00:02:48.000
of chart, etc. And these are just a few of the many properties a Chart.yaml file has. So

27
00:02:48.000 --> 00:02:54.320
that's what we will look at next. So let's look at the Chart.yaml file of this WordPress site

28
00:02:54.320 --> 00:03:01.759
as an example to understand it better. The API version is the API version of the chart.

29
00:03:02.399 --> 00:03:09.119
Now when Helm 2 was around, this field did not exist. And when Helm 3 was introduced,

30
00:03:09.119 --> 00:03:14.320
it came with the additional features that introduced changes in the YAML file which were

31
00:03:14.320 --> 00:03:21.039
not present earlier. For example, the dependency section and the type fields that you see here

32
00:03:21.039 --> 00:03:26.320
were not available in Helm 2. So Helm 3 needed a way to differentiate between charts

33
00:03:26.320 --> 00:03:32.320
built in the past and charts built for Helm 3. And so this field was first introduced

34
00:03:32.320 --> 00:03:38.960
by Helm 3. With this field, Helm 3 can now differentiate between old charts built for

35
00:03:38.960 --> 00:03:45.199
Helm 2 and new charts built specifically for Helm 3. So old charts will either not have

36
00:03:45.199 --> 00:03:52.320
this value set at all. Or if you build a chart specifically for Helm 2 today, then it would

37
00:03:52.320 --> 00:03:59.520
need to be set to v1 and all charts built for Helm 3 will have this value set to

38
00:03:59.520 --> 00:04:07.360
v2. So let's say you build a chart with the API version set to v2, but use it on Helm

39
00:04:07.360 --> 00:04:12.479
2, then Helm 2 will not even consider this field and will simply ignore any additional

40
00:04:12.479 --> 00:04:17.119
fields that were only available for Helm 3 resulting in unexpected results.

41
00:04:18.079 --> 00:04:24.399
So bottom line is, if you were developing a chart going forward, just make sure that you set this to

42
00:04:24.399 --> 00:04:30.880
v2 because you're most likely going to write charts for Helm 3. And if you're looking at

43
00:04:30.880 --> 00:04:35.839
a chart that does not have this value set, then it is very likely that the chart was built for Helm

44
00:04:35.839 --> 00:04:47.119
2. Okay, so next is the app version. Now the app version is a version of the application that's

45
00:04:47.119 --> 00:04:52.000
inside of this chart. So in this case, the application is WordPress. So this refers to

46
00:04:52.000 --> 00:04:59.119
the version of WordPress that this chart will deploy. This field is for informational purposes

47
00:04:59.119 --> 00:05:05.600
only. And then there is version which is the version of the chart itself. So every chart must

48
00:05:05.600 --> 00:05:12.079
have its own version. And this is independent of the version of the app that this chart will deploy.

49
00:05:12.079 --> 00:05:20.959
This helps in tracking changes to the chart itself. The next is the name of the chart,

50
00:05:20.959 --> 00:05:27.679
which is set to WordPress, followed by a description. And the next is type. So there

51
00:05:27.679 --> 00:05:35.440
are two types of charts: application and library. So application is the default type, which is

52
00:05:35.440 --> 00:05:40.480
all the charts that we create for deploying applications. And library is a type of chart

53
00:05:40.480 --> 00:05:47.920
that provides utilities that help in building charts. So we'll discuss more about that later.

54
00:05:48.880 --> 00:05:54.160
The next are dependencies. So the WordPress application is a two-tier application that has

55
00:05:54.160 --> 00:06:00.239
the WordPress server and a database server. The database in this example is a MariaDB database.

56
00:06:00.239 --> 00:06:07.600
So MariaDB has its own Helm charts. So we could simply add it as a dependency to our application.

57
00:06:07.600 --> 00:06:13.040
This way, we don't have to merge the manifest files of MariaDB or any other database

58
00:06:13.760 --> 00:06:21.040
into this particular chart. And then there is a list of keywords associated with this project.

59
00:06:21.040 --> 00:06:26.559
This can be helpful when searching for this chart in a public chart repository. And then there is

60
00:06:27.679 --> 00:06:32.239
maintainer section, which is information about the maintainers. And there are optional

61
00:06:32.239 --> 00:06:38.000
fields like home and icon that are used to share a URL of the homepage of the project and a URL

62
00:06:38.720 --> 00:06:49.920
to an icon. So a chart directory has the following structure. It has a templates directory that has

63
00:06:49.920 --> 00:06:54.799
the template files that we just talked about. It also has the values.yaml and the chart

64
00:06:54.799 --> 00:07:01.440
.yaml file we just talked about. And apart from these, there may also be a license file

65
00:07:01.440 --> 00:07:06.640
that has the chart license information, a README file that has information about the chart in a

66
00:07:06.640 --> 00:07:12.239
human-readable form. And there could also be a charts directory that has other charts that this

67
00:07:12.239 --> 00:07:19.359
chart is dependent upon. And we will talk about chart dependency later in this course. Well,

68
00:07:19.359 --> 00:07:22.640
that's all for now. I'll see you in the next one.
