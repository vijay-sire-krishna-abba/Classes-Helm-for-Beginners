WEBVTT

1
00:00:01.000 --> 00:00:07.880
Let's now talk about scope. Now let's look at this example to understand scopes in Helm charts. So

2
00:00:07.880 --> 00:00:14.120
here I have a config map dot yaml as part of templates in the template directory. It stores

3
00:00:14.120 --> 00:00:19.320
details to be used by our applications such as the background color of the UI, the foreground color,

4
00:00:19.320 --> 00:00:25.600
the database name, connection details, etc. These are defined and picked from the values dot yaml

5
00:00:25.600 --> 00:00:32.119
file. And we have the top level dictionary app, under which we have UI and DB. Under UI, we have

6
00:00:32.119 --> 00:00:39.160
BG for background, FG for foreground, and name and connection details under the DB section,

7
00:00:39.160 --> 00:00:45.599
which stands for database. So it's a dictionary object that has multiple levels. And let's use

8
00:00:45.599 --> 00:00:55.240
this as an example to understand scope. Now, the dot as we discussed earlier is a reference to

9
00:00:55.240 --> 00:01:03.480
the current scope. So everything falls under the root scope. And so at this point, dot means the

10
00:01:03.480 --> 00:01:11.519
root scope. And then under that we have release and values. And under release, we have name. And

11
00:01:11.839 --> 00:01:23.919
under values, we have app. And similarly, under app, we have UI DB, and then BG and FG under UI

12
00:01:23.919 --> 00:01:36.480
and name and connection under DB. So that's kind of the scope hierarchy. So as to call it, if you don't

13
00:01:36.599 --> 00:01:43.839
specifically set a scope, or play around with the scope within a file, we'll see how to do that in a

14
00:01:43.839 --> 00:01:50.680
bit. But if you don't set a scope, the current scope in the file is set to the root scope by

15
00:01:50.680 --> 00:01:57.239
default. And that is why to access any of these objects, we must traverse all the way from the

16
00:01:57.239 --> 00:02:07.400
root scope. So you can see, there is duplication of dot values dot app, and many times, and we can

17
00:02:07.400 --> 00:02:15.279
avoid that by setting a scope using the with block. So let's see how to do that. We can set

18
00:02:15.279 --> 00:02:22.800
a scope using the with block by specifying the path to dot values dot app like this.

19
00:02:26.279 --> 00:02:33.240
This way, within the with block, the scope is set to values.app. So you no longer have to

20
00:02:33.240 --> 00:02:41.240
specify .values.app. Here as the . within this block implies the current scope, which is

21
00:02:41.240 --> 00:02:48.360
already values.app, you could take this one step further by setting an additional scope within

22
00:02:48.360 --> 00:02:57.240
this block. So as you can see, the UI and DB each have two lines where the UI and DB are repeated.

23
00:02:57.240 --> 00:03:03.440
So we can set a scope to UI. So we add an additional with block within the existing width

24
00:03:03.440 --> 00:03:11.559
block and move the background and foreground lines under it. And this sets a new scope within

25
00:03:11.559 --> 00:03:18.759
the internal with block, where dot would mean the current scope and that is dot values dot app dot

26
00:03:18.759 --> 00:03:25.960
UI. So you could just say dot BG, and that would refer to the BG value, and FG that would refer

27
00:03:26.080 --> 00:03:35.639
to the values dot app dot UI dot FG. And we shouldn't have to specify dot UI. And we do the

28
00:03:35.639 --> 00:03:43.199
same for the DB section as well. So we set a new with block to set a current the current scope

29
00:03:43.199 --> 00:03:53.240
inside DB and then we remove dot DB from the directive. Okay, so that's how scope works. Now,

30
00:03:53.240 --> 00:03:59.320
let's say we'd like to pass through the release name as a config parameter called release. So we

31
00:03:59.320 --> 00:04:06.160
set release and then we pass in dot release dot name. And we try to access the release name as

32
00:04:06.160 --> 00:04:13.800
we did in the first line in the under the name of the config map. Now this will result in an error

33
00:04:13.800 --> 00:04:19.239
that states that there is a nil pointer while evaluating release dot name. Now this is because

34
00:04:19.239 --> 00:04:25.440
within the with block, we are currently under the scope of values dot app. And within this scope,

35
00:04:25.440 --> 00:04:35.959
there is no release object, the release object is in the root scope. So does that mean that we can't

36
00:04:35.959 --> 00:04:44.799
refer to anything outside of the current scope? No root is also represented as dollar. So you

37
00:04:44.799 --> 00:04:52.040
can access anything in the root scope using dollar like this. So you just have to put dollar

38
00:04:52.040 --> 00:04:56.559
before the dot. And that would take you all the way to the root and then you can just say dollar

39
00:04:56.559 --> 00:05:03.279
dot release dot name and that would help you access the release name from within the with

40
00:05:03.279 --> 00:05:08.359
block. Well, that's it for now. And I'll see you in the next one.
